#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

struct Node {
    int data;
    struct Node* next;
};


struct Graph {
    struct Node* adjList[MAX_NODES];
    int visited[MAX_NODES];
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

 
struct Graph* createGraph() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    for (int i = 0; i < MAX_NODES; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
     
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}


void BFS(struct Graph* graph, int startNode) {
    struct Node* queue[MAX_NODES];
    int front = 0, rear = 0;
    queue[rear++] = graph->adjList[startNode];
    graph->visited[startNode] = 1;

    while (front < rear) {
        struct Node* currentNode = queue[front++];
        printf("%d ", currentNode->data);

        while (currentNode != NULL) {
            int adjNode = currentNode->data;
            if (!graph->visited[adjNode]) {
                queue[rear++] = graph->adjList[adjNode];
                graph->visited[adjNode] = 1;
            }
            currentNode = currentNode->next;
        }
    }
}

int main() {
    struct Graph* graph = createGraph();
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 3);

    printf("Breadth First Traversal starting from node 0: ");
    BFS(graph, 0);

    return 0;
}
