#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100
typedef struct {
    char items[MAX_SIZE];
    int top;
} Stack;
void initialize(Stack *s);
int isEmpty(Stack *s);
int isFull(Stack *s);
void push(Stack *s, char value);
char pop(Stack *s);
char peek(Stack *s);
int isBalanced(char *expression);

int main() {
    char expression[MAX_SIZE];
    
    printf("Enter an expression with parentheses: ");
    fgets(expression, MAX_SIZE, stdin);
    
    if (isBalanced(expression))
        printf("The expression is balanced.\n");
    else
        printf("The expression is not balanced.\n");
    
    return 0;
}

void initialize(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return (s->top == -1);
}

int isFull(Stack *s) {
    return (s->top == MAX_SIZE - 1);
}

void push(Stack *s, char value) {
    if (isFull(s)) {
        printf("Stack overflow!\n");
        exit(EXIT_FAILURE);
    }
    s->items[++(s->top)] = value;
}

char pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow!\n");
        exit(EXIT_FAILURE);
    }
    return s->items[(s->top)--];
}

char peek(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty!\n");
        exit(EXIT_FAILURE);
    }
    return s->items[s->top];
}

int isBalanced(char *expression) {
    Stack stack;
    initialize(&stack);
    
    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '(') {
            push(&stack, expression[i]);
        } else if (expression[i] == ')') {
            if (isEmpty(&stack) || pop(&stack) != '(') {
                return 0;
            }
        }
    }
    
    return isEmpty(&stack);
}
